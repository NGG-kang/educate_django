Modesl의 Meta는 모델을 정의하진 않고
모델의 쿼리문? 예를들어 정렬이라던지 기본값이라던지를 정하는거 같다
https://docs.djangoproject.com/ko/3.0/ref/models/options/ 여기 참조


모델필드 타입
기본적인 문자열, 숫자 말고도
이메일 필드, URL, 아이피, 외래키 등 여러가지가 있다
https://docs.djangoproject.com/en/3.0/ref/models/fields/#field-types 참조
필드들의 차이는 디폴트 적용된 유효성 검사 등의 차이
같은 모델필드라 해도 DB에 따라 다른 타입이 될수가 있다

유효성 검사같은 경우는 django의 form을 타야 검사를 한다
데이터를 그냥 넘기면 검사 안함

ManyToManyField / OneToOneField 등 RDBMS에 걸맞는 관계 필드를 정할 수 있다
1:N의 관계는 Foreign.key로 표현한다

필드 타입을 타이트하게 지정하는 것이 입력값 오류를 막을 수 있다
validators들이 다양,타이트하게 지정 할 수 있다
프론트의 유효성 검사는 사용자 편의, 백엔드의 유효성 검사는 필수
직접 유효성 검사를 만들지 마라... 이미 django에서 만들어진게 있으니까 그거로 써라

django의 Model은 쿼리를 만들어줄 뿐, 성능을 높이려면 데이터베이스를 공부해라

ForeignKey(to, on_delete) 
to는 클래스를 직접 지정하거나
on_delete는 삭제시의 규칙이다
여러가지 규칙이 있는데
https://lee-seul.github.io/django/backend/2018/01/28/django-model-on-delete.html
여길 보자 

revers_name 1:n 관계에서 1에서 n을 찾을때 쓰는것
1과 관계된 n을 가져온다... 이거 좀 더 공부해야할듯
이름 충돌이 날 경우 makemgirations 명령 실패
왜래키 지정때 related_name="" 연관 이름을 따로 지정하면된다
또는 어느 한쪽에 reverse_name을 포기 > related_name='+'


어드민 페이지는 바꾸는게 좋다
URL reverse
django-admin-honeypot - 가짜 어드민 페이지
서비스 초기에 관리도구로서 제격
관리도구 만들 시간을 줄이고 End user 서비스에 집중
내부적으로 django form을 적극 사용

static파일
개발 리소스로서 정적인 파일(js,css,image등)
Media파일
FileField/ImageField를 통해 저장한 모든 파일
DB필드에는 저장경로를 저장하며, 파일은 파일 스토리지에 저장
실제로는 문자열을 저장한다


파이썬 이미지 라이브러리 pillow

uuid로 / upload_to의 경로를 입맛대로 바꿀수있다
file upload handler / 파일 크기 제한 (2.5mb 미만은 메모리,  2.5mb 이상 디스크로 저장)

__icontains는 대소문자 구분 없는 값 찾기

less than, less than equal, greater than, greater than equal
qs.get(id_lte=2) // __lte는 작거나 같다 (Less Than Equal : lte)
lt, lte, gt, gte
qs.first(), last()

filter는 where exclude는 where not sql문이다
(,) 콤마를 쓰면 and 조건 OR조건은 Q객체를 사용해야한다 (from django.db.models import Q)
개별적으로 Q로 묶으면 or 연산을 한다 / qs = qs.filter(Q(id__gte=2) | Q(message__icontains=query))


debug툴에 body태그가 없으면 안나온다



모델 변경 -> makemgirations 명령(마이레이션 파일 생성) -> sqlmigrate 멍령으로 SQL 확인(의도에 맞게 생성되었나 -> migrate명령(DB에 적용)
모델 필드 어떠한 변경이라도, 실제로 DB스키마에 변화가 없더라도 마이그레이션 파일 생성
마이그레이션 파일은 모델의 변경내역을 누적하는 역할, 절대 삭제하면 안된다
마이그레이션 파일이 많아질경우 squashmigrations로 통합이 가능하다

migrate 정/역방향 이 있다
python manage.py migrate <앱이름>
미적용 마이그레이션파일 부터 최근 마이그레이션파일 까지 정방향으로 순차적으로 수행
python manage.py migrate <앱이름> <마이그레이션-이름>
지정된 마이그레이션이 현재 적용된 마이그레이션보다 
이후라면 정방향으로 순차적으로 지정 마이그레이션까지 수행
이전이면 역방향으로 순차적으로 지정 마이그레이션 이전까지 수행(역방향은 기존 마이그레이션 되돌리기 라고 생각하자)


팀원 각자가 마이그레이션 파일 생성 -> 충돌발생
마이그레이션 파일 생성은 1명이 전담해서 생성
생성한 마이그레이션 파일을 버전관리에 넣고 다른 팀원은 이를 받아서 migrate만 수행 



urlpatterns

path와 re_path
path는 ('',뷰,name=?)
re_path('정규표현식',뷰,name)

path는 정규표현식을 Conveter 해둔것...
re_path로 정규표현식을 쓰는게 주소를 사용하는데 가장 좋다
#장고 표현식 자료 
https://docs.djangoproject.com/en/3.1/topics/http/urls/ 

글자에 대한 패턴 + 연속된 출연 횟수 지정
대괄호 내에 1글자에 대한 후보 글자들을 나열 하는게 정규표현식의 끝


View
함수나 클래스 위에 @로 시작하는건 장식자 문법
함수기반 뷰에는 장식자 문법을 사용한다

클래스 기반 뷰에서 공통 기능들은 상속 문법으로 적용한다



HTTP 상태코드
웹서버는 적절한 상태코드로서 응답해야한다
HttpREsponse 클래스마다 고유한 status_code가 할당
rest api를 만들 때 유용하다

200번대 성공
300번대 요청을 마치기 위해, 추가 조치가 필요하다
400번대 클라이언트측 오류
500번대 서버측  오류